name: Deploy to EC2 via SSM

on:
  workflow_dispatch: # Manual trigger

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Docker and Docker Compose via SSM
        run: |
          aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands='[
              "sudo apt update && sudo apt install -y docker.io curl",
              "sudo systemctl start docker",
              "sudo systemctl enable docker",
              "sudo curl -L https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose",
              "sudo chmod +x /usr/local/bin/docker-compose"
            ]'

      - name: Deploy Application
        run: |
          aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands='[
              "cat <<EOF > /home/ubuntu/docker-compose.yaml
              version: \\"3.8\\"
              services:
                remix:
                  image: ${{ secrets.DOCKER_USERNAME }}/getdoa-remix:latest
                  ports:
                    - \\"3000:3000\\"
                  depends_on:
                    db:
                      condition: service_healthy
                  environment:
                    DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}
                    NODE_ENV: production
                    SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
                  networks:
                    - app-network

                db:
                  image: postgres:latest
                  environment:
                    POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
                    POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                    POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
                  expose:
                    - \\"5432\\"
                  volumes:
                    - db_data:/var/lib/postgresql/data
                  healthcheck:
                    test: [\\"CMD-SHELL\\", \\"pg_isready -U ${{ secrets.POSTGRES_USER }}\\"]
                    interval: 10s
                    retries: 5
                    start_period: 30s
                  networks:
                    - app-network

              volumes:
                db_data:

              networks:
                app-network:
              EOF",
              "sudo docker-compose -f /home/ubuntu/docker-compose.yaml up -d"
            ]'
