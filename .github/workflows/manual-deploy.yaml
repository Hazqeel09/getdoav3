name: Deploy to EC2 via SSM

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Application to EC2
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Application via SSM
        id: deploy_ssm
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy application with docker-compose and .env file" \
            --parameters '{"commands": [
                "set -e",

                "# Define working directories",
                "WORKDIR=/home/ubuntu/deployment",
                "BLUE_DIR=$WORKDIR/blue",
                "GREEN_DIR=$WORKDIR/green",

                "# Write secrets to .env file",
                "echo \"DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}\" > /home/ubuntu/.env",
                "echo \"POSTGRES_USER=${{ secrets.POSTGRES_USER }}\" >> /home/ubuntu/.env",
                "echo \"POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}\" >> /home/ubuntu/.env",
                "echo \"POSTGRES_DB=${{ secrets.POSTGRES_DB }}\" >> /home/ubuntu/.env",
                "echo \"SESSION_SECRET=${{ secrets.SESSION_SECRET }}\" >> /home/ubuntu/.env",

                "# Determine current active directory",
                "CURRENT_DIR=$(sudo cat $WORKDIR/current 2>/dev/null || echo \"blue\")",
                "NEXT_DIR=$([ \"$CURRENT_DIR\" == \"blue\" ] && echo \"green\" || echo \"blue\")",

                "echo \"Switching to $NEXT_DIR\"",

                "# Prepare the new directory",
                "mkdir -p $WORKDIR/$NEXT_DIR",
                "curl -o $WORKDIR/$NEXT_DIR/docker-compose.yaml https://raw.githubusercontent.com/Hazqeel09/getdoav3/refs/heads/main/docker-compose.yaml",

                "# Pull new images",
                "sudo docker-compose -f $WORKDIR/$NEXT_DIR/docker-compose.yaml pull",

                "# Start the new deployment",
                "sudo docker-compose -f $WORKDIR/$NEXT_DIR/docker-compose.yaml --env-file /home/ubuntu/.env up -d",

                "# Stop old containers if docker-compose.yaml exists in CURRENT_DIR",
                "if [ -f $WORKDIR/$CURRENT_DIR/docker-compose.yaml ]; then",
                "  echo \"Stopping old containers in $CURRENT_DIR\"",
                "  sudo docker-compose -f $WORKDIR/$CURRENT_DIR/docker-compose.yaml down",
                "else",
                "  echo \"No existing deployment to stop in $CURRENT_DIR\"",
                "fi",

                "# Clean up unused Docker resources",
                "sudo docker system prune -f -a --volumes",

                "# Update the current active directory marker",
                "echo \"$NEXT_DIR\" | sudo tee $WORKDIR/current > /dev/null",

                "echo \"Deployment complete. Active directory: $NEXT_DIR\""
            ]}' \
            --query "Command.CommandId" \
            --output text)

          echo "Command ID: $COMMAND_ID"
          echo "::set-output name=command_id::$COMMAND_ID"

      - name: Fetch Command Output
        run: |
          aws ssm list-command-invocations \
            --command-id ${{ steps.deploy_ssm.outputs.command_id }} \
            --details
